k = 12
t = 25
Dna = ['AAGCCGCAGTGCTCTGGAGCCTTTGCGTTCGGTGCGCAAAGTTTCTCTCAAAGTGTATGATCTGTACGCGTGCAAGATTTGGATTCGAGATTGTCCGAATCATATTCGGAATCCGGGTGCTGTGCTGCCTCGCCAGTTTTCTGGGGAATGAGTGTT',
'GTAAGAGGTTATGTATCGGACATCGTCAGACGAGGTTAGCGATAAACAGTCGGACTCCACTTTGAACGTGTGAAGAGATGTGATCGCAGATACTAATAGTCTCCTGATGACCCCCCGCCTACAAAAATCTGTGACCGCCGTGGATTCCCACCGAAT',
'CCCTCAAAACGGCCAACTAAAGTATCGTCGCGTCCCGGTGAGCTGAAATTAGGACGGGTGAGTGAATAGCGACCCAAGACTTCTATAATATGCGGGTTTCTGCGCTCTACGGTGCAGCCTAAAGTCTCTAAAAGGGTATGGTAAGCAGTGTTCAGG',
'TGCGGGAGCCGTAGCGCTGGGTACCCCATTAGTTGGTGCTACCTAATCGTACGTCGGATGGTTCATGGGAAACCTAACAACATGTTGTTCAGCAGGTGGGAACGAGTGCGGTGCGGGTGAAGGCGTTGGCGCAAAAGGCGTATTCGACATGAACTG',
'TAAGGACGAGTGCCTTTCCAATACTTTCAGTTCATTCCTACTGTACCGGATGAGTTGGTTAATAGGATTCCAGATTTGGTGCAGCGGCGAGTGACCCGCAAATGGATACCCAACACCATGACTCAATTTAGGGAAAGATTTCGGACCTTATCCCGT',
'ACACCTATCCTGTCGTCCTGACTCCGCCGGGTCTACATACTATGTAAGTGCGAACGAGTGACTTTCTGACCATTAATATCAGCTATGTGAGCTAGATTTGCGCCCCTGTCTTAATATGGTGCTTAGTAGGTGGCAGCTAGCGCTAACACTCTTCAT',
'CTTGTCGCGTCCGCGGCCAATCGAAACCGTGGCTTAAGGCGCGCGCTCTCTGTACGGGTGAGTCAGGCCACGAATTTAGTACAAGGAATGGAGGTTGCTCCGTACAGCCTAGAGAAGCTATCATGCCTGTACATGACACACTTATAACGCACCCTA',
'AAGACGTTACGATTCGAACGAGTGAATTTTCACCCGAGGCAGAGCTTTGCGGTCGGCAGTTGATTACCAAGCTGTCTACCCTCATACCAGGAGGTATCCGAACCCTTATTACATTAGTGTCTCACAGTATTCATGTATTCGCCCACGATCCCAGGT',
'TCTCGATGCTCTGCACTATTCTGCTAGTACTCATCCGGGTGCGCTACCGGGTGGGAACCCCGAAGTCTTAATTTCGGACGCGTGTCTTAGACATGGTGGTGAAAGGACGGAGCGACAGCGCCCCTATCAAACCTCCGGAAGCAAGAGTAATCTTCC',
'CATGTATAAATGCAAGGCTTAGGGCAAAAGTACGCGAGGCGGAAGACTTGGCACAGCTAACGAGCCTTGCCCTGAAATTACCACTTTAACTAATCATCTGTACGCGTGACTCTGATTGAGAAGCTGGACAACGTTTTTCCGCAACAAATCACGTAT',
'TACCTTAGATAGGGTCATTAGCTCATAAGCCAGAAAAGGTCCTACATCAGAACTATGCCGCACATAGCTTGCTCAAATCAATACCATGCAGAATGTATTCCCTTTTGCGTGGGGCACTACTGGGGACGAGTGTGTAAGCGGTCCTTTTCACACAGG',
'GTCCTAATCCGCTTAGCGATGAGTCCTTTTGCAACCCAACTCGCCGCACGCCGTCGCGGCGATGGGATGCTCCTGATCGATGCTATACTGTTTACTCGCAAGGGCATATCCATTCGTCGAAAGATACACACTAACACTGCGACCTCCGAACGCGTG',
'TCCGCACGCGTGCGAAGTCACTTCTAGGGACCCCGAAGATCTTGCGATGCATGGTGAACGCCGATTTGATCCGCCCGAACTTCCTATGTTAGTTGTATAGTGACCGAAGGCACCCCACAACATAGTGAGTCGCAATAAGTTCACGAGGAACGGGGA',
'GGGAGCTAAAGTAGCTCGCCGGAGATTATAAGTTAAACTAACCGGAAATCCTTCATTCACTATTGATGACGCCCTCCATAATGCGTACATGCGTAGTCTGAACGCGTGTAATCACGTGATGGCGGGTAATAGCTTACAGGCATTGTCGCCGAATGA',
'TACAACCGCGATACCCCTTGTTCACCCTCGGGCTTATTAGTACGGGTGAAACCGCAGTGAGAACCCAACTTAAGGATTAATGCGTAGCGCGACCGCATTAATGCACCTGGCGTGTTAATGCCCCAGCTCAAGGACTAATTTTCCCGGCACCCAGAT',
'TTCGAAAAGTGTAGACTCGCATTACCACAAGGGGTTGCTCACAGTGTTCTTTACGCGTTAGCTATTTGTTGATTAGCACGGGTGGCGCACTCCTGTCCGTTCCCGGACCCACCTATGTGTCAGCGAAGGTCGGCGACTAGGAAACGCCAGGCAATC',
'TAAGTACGCGTGGCGCAAGACGCTATATCGGGATCTCCTTGTATCACAAAAAAAACGCCACAGCAGTAATCGATTGTGACTTGACAGATCTTTCATCTAGTAGCGGGATAGAGGCTTTTCAGGTTAAGTGCATACTCTGAGTCATTGAAAGATCTT',
'AATATCTGGGACCTGAGTGCTAGGGTGACAGGCGGGCAGATGCGGATGGGCTAGGGCGCCTGCTCTATTGCTGTAGGCCAAGAGTTGGCGTCTGGAAAGATAGACGACCCAAACCATTTTATAGGAATTAGCTCAGCACGCGTGAGCACCTCGACT',
'TGGAGATGCTGTTCGAACTGCTAAAATTTCTGAGCTCCCTCCCCGAATGGAACGGACCCAACGTAGCTCTACCGAGCAGGGATGGATGGGTTTGATGTTTATCTGTCTTTCAACTATGGCTCGGCACGCGTGAAAGCTCGCCTAGCGAATGGATGT',
'CAAGTTTACAGCCCGCGGGGTGCAATAATTTATACTGAATAAGCCCCTGACGACCCCAGTTTTCATTTTGCCAATTTGCTTCGTGCGTGGCCTCTAGAGGGGTACCCCGTGTCGGACGAGTCAGTACGGGTGCCTGGCCTTGTATGGACGTCAGGA',
'CTTCCATTAACAGCGAAAATGGCTCTGATGGTACAACTTAAAAGAGGGACGGCGCGACTAGTCCAACAGTCTAGCTGTCCCCAATTGGAACGGGTGAGGCTTGAAAGATTGCTAACATTCCGAGTACACTGGCTCTTTCTAATTGGCATATTAGGA',
'TAGAATCCTCCGCTGGGTTGTGGAGATAAATACTCCCCTCGTTCTTAAAGCATGGCAGCAACACGAGTCGGACACTAACCTAAGGAACGTTCTGGAGTCAAATGTAAATAAGCACGCGTGTCCCAATGCCTGCAGCTGTGTAGCCCATCCTTCGGA',
'TAGGTGAGCCGCAGTCTTCTTCACTAATAGAGTACGAGTCTGAACCAAGATATTGCCGTTGTTAGAAGAAATTGTATCGTTCATGGCTCGGGTAGTTTTGGACGCGTGGCCATCGTAGAACAACATTCCAGGGAGGGACGGATTCTGTAACATGGC',
'GACTATCTATGCCCAACATATGAGCATCCAAAAAGGAACCGAGCAATCACTATCCGTTCTGGACCGGGCAGCGGTCAACACTAACTAATGCTTCCGTCAGGACGCGTGGCTTGACAATAGCTCTGCGTAGGTTCTTAACCATAAAATGCGTACCCA',
'GAAACTGCGTGACAAATGAGCGCACCCACCCTGTGTGGTCTCACGACCTCTGATTGTAGTCTCGAAGGTTTATCGTAGCTCACTATCAAAATCAATAAATACAGTCGGAAGCCTGCGAATACCCGGGATTCGTGGGCACGGGTGGCCTGTAGGTCC']

def hamming_distance(seq1,seq2):
	distance = 0
	length = len(seq1)
	for i in range(length):
		if seq1[i] != seq2[i]:
			distance += 1
	return distance

def probability_nucleo(Pattern, Profile):
    probability = 1
    for i,nuc in enumerate(Pattern): 
        for j, listofprof in sorted(Profile.items()): 
            if nuc == j:
                probability *= listofprof[i]
    return probability

def ProfileMostProbable(text, k, profile):
    maxp = -1
    for i in range(len(text) - k + 1):
        kmer = text[i:i + k]
        prob = probability_nucleo(kmer, profile)
        if prob > maxp:
            maxp = prob
            maxk = kmer
    return maxk

def TextProfile(Text, pseudocounts=1):
    t = len(Text[0])
    if type(Text) != list:
        Text = [Text]
    profile = {'A': [pseudocounts] * t, 'C': [pseudocounts] * t, 'G': [pseudocounts] * t, 'T': [pseudocounts] * t}
    for i in range(t):
        for j in range(len(Text)):
            profile[Text[j][i]][i] += 1
    return profile

def Calculate(Motifs):
    k = len(Motifs[0])
    profile = TextProfile(Motifs)
    Score= 0
    consensus = ''
    for i in range(k):
        freqent = 0
        for nucleotide in ['A', 'C', 'G', 'T']:
            if profile[nucleotide][i] > freqent:
                freqent = profile[nucleotide][i]
                addon = nucleotide
        consensus += addon
    for motif in Motifs:
        Score += hamming_distance(consensus, motif)
    return Score

def GreedyMotifSearch(Dna, k, t):
    BestMotifs = [dna[0:k] for dna in Dna]
    Optimize = Calculate(BestMotifs)
    DNA = Dna[0]
    for i in range(len(DNA) - k + 1):
        Motifs = [DNA[i:i + k]]
        for j in range(1, t):
            profile = TextProfile(Motifs)
            Motifs.append(ProfileMostProbable(Dna[j], k, profile))
        Curr = Calculate(Motifs)
        if Curr < Optimize:
            BestMotifs = Motifs
            Optimize = Curr
    return BestMotifs
    
print("\n".join(GreedyMotifSearch(Dna, k, t))) 
