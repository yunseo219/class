#he first potential issue with implementing MedianString is writing a function to compute d(Pattern, Dna) = âˆ‘ti=1 d(Pattern, Dnai), the sum of distances between Pattern and each string in Dna = {Dna1, ..., Dnat}. 

#Input: A string Pattern followed by a collection of strings Dna.
#Output: d(Pattern, Dna).

pattern = 'GATGGA'
dna = ['TGGTAAGGACGACGATTCTCAGCCGGCAGCCTATGCACACCAACTACTCATCTCAGAGTCCCTCCCAGTAAAAATTCAGCAAATCGAGATAGGG', 'CGTCCGCCCTAATCTCATGCAGAAGGTTACCAAGTACGTAGGATAGTACTATCCACCTTCGGTTAACTCTACAGGAAGATGTCCCAATATTCAT', 'TCCCTGAACGAAGGCTCAGAGTAACCCGCATAGCGATTTTTGCTGAAGAAAATCGATTATGCGGTAGTTTATCTAACAGGCGTTTCTAGGGCTT', 'TATCTTCTGCCCATGATTGCTAGTCTACGCAGGAAGAGTGGCTGATTCGCGGGTCCGTAACACCGTTTGAGAAGACATCAAGGCCAGTAGCAGA', 'ATGACACTCTTAAGGCCTCTCAGCTTCAACACAACGAACGGTATAGCTGTTCGAAAGGACGCATCGCTTATGAATCGTGGGCGGAAAAAAAGTT', 'TCGAACTCGCATTTTTTACGAACGCGGACACCAACCTCACCCCCGCTATGCTGAGTTTTCTATTAATGACGGCAGGGCAGGAGTAACTCTCTTC', 'TATGTAAGGTCGTGACGCAGCTCTCTAGGTGGGCTATGTTCCAGAGGACCATAGTTCATGCGTGGGCTAAAAGAAGATCGATGCGGCCCCTGCA', 'AGCTCGTTGGTGTTACAGACTATGAATGATAAAAAGGACCGCAGCTGCATGTAAATACGATCATACCTGTCCTTGCACGCGTGCCATGACTCTA', 'TAGATGCACCACTGGCAACCTCACCCAGTGGCGCCATTAGGTCGTGGGGCGCTTGCATCTTAGTAGGGTGGTCAGGTCCAATCAGGAACGATCC', 'CACTGTGACCAGTAATTAGGGCTATGGGGTCGGCTTGGCCGCCCGCCACCATAGATCGGAATGGTAGTGCCAGAGCCACGCTGTCGGAAGAGTT', 'TAGTGTTTCCCAAGAGCCTATATGGTCGTGTAGATAGACAGTATGTCCTGTGGCATTAGCTTTAATGTACTCGGGGAAATCCAGACTGGAAGGC', 'TGTGAATGATACCAGGGATAGAGCGCCAATTCGAAAAGGTCCTTAGGATGGACTTCTTCGAACGACAACGCTCCCTGGCAAACTAAAGGGTTTA', 'TTGGGTTTGGGCGCATCGGGGTTCTACTTGTAGCTGCCCTATACTTTATGGCCTAGGCAGCGCTTCTTGTTCCCAACAAACCCTCCAAGCTAAC', 'TCCTAGCAACCTACGCACAGCGCTGTCGTAGCCAATAGGATTCAATTCTCATCTACTCTTAGATGGGAGATCAGTACCTTCACGAAGGTCGTGA', 'CAATTATCATTCTACTTTCGAATAGAGTCTCAACTCCCGTTTCCTACACAAGCATAATTCCGTTCGTATAGTTGTTATAGTTTAGAATAGGCGC', 'TGGAGACCTTATGGGCAAAAATATGGTTGGCCACAATTTTAGGCCTGGCATTCACTACGAATCGACGGTGCCCGATACTCGGCCCGCCAGGCGG', 'TTACGTGTTACCTCACTTTTCAAGCCTGCTGGATAAGGTACCCGGGATGTATGATCCCAGGCCTGGCGATGTAAAGGAGGTTGACAGCTTCTAG', 'AATGATCTGATACCTGTGTAGTAGTCGTGCATTTAGGGTCGTCGCCGGTATAGAATATTCACAAGTCCTCTTGCTCGCAGAGCACGACCTAGGG', 'TGGCGAGTGGATGGATATCCGAAGACACATATGGCCGACGTTATTAGCAGTAGGCCTGCCGGTCCAACGGGATGAGGGGGGCGCTCAGAGGGGC', 'TGTGAGCGACTACCGTATCTCGGGATGGGGAGATCGTATTATGTTTCCAAACGTGGAAGCAAAAAATGGCCCGTAGGCTGCGCAACGGCGGAAG', 'GTATATGTCACCATAGACATAGCAATCCGAATGAGAATGGTCTAAACGAAGCCGCTGCGCCTTGAGTAGAACTAGTGGCCGAAAGCGTTCAACT', 'TACCGAGGTTGGTGCCGCTACTAGATCCCCGCGCCAGGAGATTAGCCCGTAGGATCGATCATCGTTTTACGAGGCTTTGCTTATGATTTATCGC', 'CTACCACCTCGACCTCCGCTCGAGGATATAAAGTTAAAGACATAGCACGACTATGTTAGGTAGGTAGTCCGGTTCTAAATTGGACCAGATTCAC', 'CGCAACTACGAACTAGGATTATTGGTTAACCATCGGTGTTGCTACCTGGTAAAAAGGTCGCGAGCGATTCTATAAATAAATAGCGGCTCTATGG', 'GCATACCCGGTGTATGTGATATGCTTAGGTGCGTACCAAGCTTACAACAGGGTTAATGCAATATACTAGAACCAATTTATCTGCAGCTGGCAGG', 'CGCCGAATGGTAGCCTGACCGTCACCTACCGAAGACCAAAAACTAATGCCGTCGTGGTGAATTGCTATTAAACGATTGCAATTTGTATATCATA', 'CCATCAGAGCGTAAGGTCAACAATGTTCAGTTATTTTAGAGGAGGTGCGGGCCCATGGGGGACCTGTCTGAAACGGCCTTCTTAGATAGTGGGT', 'AGTCAGCACCCGATGCCTGTTGTGGTGGCCAGTTCACAGCAGTCTTAGTCTACCTTGTCCCTTTTTGTGAGTAATTTCCCCCACTGACATAGCC', 'CCGTTGCGCTTACTGGGAATAGCTGCCCAATTCTCCTTCTAGTATCCTCATCGAGATGCTGGGTTAGTTGATCTAGCCGAATGGTTGTCCAGAG', 'CCTCACGTACCATCGCCAAGCACATCTTCACCCCTTGCAGCGACTACACGGTCAAATCCCTTGGTCAAGCAACGATTCTCCACCTCTAGTGCAC', 'ATCGAACCACCTTTGTGAGGGCTAATCTTGCTTGACTACTGCGCCGGATATGACAGAAAAGGCCACGTATGCTTTAGAGGTTTATACTTCCTCC', 'AGACAGGACCCGAGGGACTGTACCGAAGATGTAGGTCGCCCTACTGGCTGTAGGCGAGGTACGGTAACTACCTGTTTCGACATGATGTGTGGCC', 'CACAGCTCAGGATTTTGAGCCCTACCCTCACATTGCCCTGGTGGATGAGTCATCCATCAGGTACACAATACTCAGCGGTACCCGTACTTTCGTG', 'AGAGAAGTTAGCCACGGAATTCTACTTAGTTTTCACAACCTGTTTGGTTGAACTCTAACCTTTAGTGAACGTGCTCTGGGCGACAAAGTGATTC', 'TATTATGACAGTAACTATTACGATTGGCTACGCGGATAAGAGGGGTGGGGGTTCTTACGTGTGATAAGGCCATGAATGGGTGTGCAAGGGGAAT', 'ACCACAGTTTTGGCGGTCCGGTTTTCTGACCGGGGGACCCCAAAGCATCTCAACCTACGACCGGAATCCGAAAGGCTTGAGATTTAATTTTACC']

def hamming_distance(seq1,seq2):
	distance = 0
	length = len(seq1)
	for i in range(length):
		if seq1[i] != seq2[i]:
			distance += 1
	return distance

def DistanceBetweenPatternAndStrings(pattern, dna):
    distance = 0
    for seq in dna: 
        Hamdist = float('inf') #hammingdist
        for i in range(len(seq) - len(pattern) +1):
            if Hamdist > hamming_distance(pattern, seq[i:i+len(pattern)]):
                Hamdist = hamming_distance(pattern, seq[i:i+len(pattern)])
        distance += Hamdist
    return distance

print(DistanceBetweenPatternAndStrings(pattern,dna))
